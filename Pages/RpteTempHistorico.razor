<TelerikRootComponent>
    @*@page "/RpteTempHistorico"*@
@page "/RpteTempHistorico/{Userid:int}"
@page "/RpteTempHistorico/{Userid:int}/{Companyid:int}"
@using Telerik.Blazor.Components;
    @inject smstemp.Interfaces.Blazor_IListados IListadosService
    @inject smstemp.Interfaces.Blazor_IrpteHistorico IrpteHistoricoService
@inject IJSRuntime jsRuntime
<TelerikAnimationContainer @ref="@Cargando" AnimationType=@AnimationType.SlideUp>
    <div class="loading-bar" />
</TelerikAnimationContainer>
<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="font-bold no-margins">
            Reporte de Temperatura Histórica
        </h3>
        <small>Reportes de temperatura histórica.</small>
    </div>
    <div class="panel-body">
        <div class="card-deck">
            <div class="card">
                <div class="card-header">
                    <label for="select-date">Hora Inicio:</label>
                    <TelerikDatePicker @bind-Value="@ValorFecha1" Id="Date1"
                                       Format="dd MMM yyyy" Width="250px" Max="@maxDate"></TelerikDatePicker>
                    <label for="select-date">Hora Fin:</label>
                    <TelerikDatePicker @bind-Value="@ValorFecha2" Id="Date2"
                                       Format="dd MMM yyyy" Width="250px" Max="@maxDate"></TelerikDatePicker>
                    <label for="select-date">Tipo:</label>
                    @* <TelerikDropDownList @bind-Value="ValorListTipo" Data="@dataListTipo"
                                             ValueField="Id" TextField="Valor" Width="130px">
                        </TelerikDropDownList>
                        <label for="select-date">Subflota:</label>
                        <TelerikDropDownList @bind-Value="ValorListSubflota" Data="@dataListSubflota"
                                             ValueField="Id" TextField="Valor" Width="250px" OnChange="@onChangeSubflota">
                        </TelerikDropDownList>
                        <label for="select-date">Vehículo:</label>
                        <TelerikDropDownList @bind-Value="ValorListVehiculo" Data="@dataListMobile"
                                             ValueField="Id" TextField="Valor" Width="200px">
                        </TelerikDropDownList>*@
                    <TelerikButton class="btn btn-primary" OnClick="@Consultar">Consultar </TelerikButton>
                </div>
                <div class="card-body">
                    @if (bandera == true)
                    {
                    <h3><label style="text-align: center; display: block;     padding-bottom: 10px;"> Temperatura Promedio Mínimo de Sensores</label></h3>
                    <div id="graficoHistoricoMin">
                        <TelerikChart Transitions="false">
                            <ChartTooltip Visible="true">
                            </ChartTooltip>
                            <ChartLegend Visible="true" Position="ChartLegendPosition.Top"></ChartLegend>
                            <ChartSeriesItems>
                                @for (int i = 0, len = mobileids.Count(); i < len; i++)
                                  {

                                      List<object> datos_ = new List<object>();
                                      //List<string> fechas_ = new List<string>();
                                      // string[] fechasAxis;
                                      List<int> pos = new List<int>();
                                      string alias = "";
                                      for (int j = 0, lenj = DatosGrafico.Count(); j < lenj; j++)
                                      {

                                          if (DatosGrafico[j].mobileid == mobileids[i])
                                          {
                                              alias = DatosGrafico[j].alias;
                                              pos.Add(j);
                                          }
                                          //  fechasAxis = fechas_.ToArray();

                                      }
                                      for(int k = 0, lenk = xAxisItems.Count(); k < lenk; k++)
                                      {
                                          bool existe = false;
                                          for(int h = 0, lenh = pos.Count(); h < lenh; h++)
                                          {
                                              if (xAxisItems[k] == DatosGrafico[pos[h]].dategps2.ToString("MMM dd"))
                                              {
                                                  existe = true;
                                                  datos_.Add(DatosGrafico[pos[h]].promedioMin);
                                              }
                                          }
                                          if (!existe)
                                          {
                                              datos_.Add(null);
                                          }
                                      }
                                <ChartSeries Type="ChartSeriesType.Line" Name="@alias" Data="@datos_">
                                    <ChartSeriesLabels Visible="false"></ChartSeriesLabels>
                                </ChartSeries>
                                  }
                            </ChartSeriesItems>
                            @*<ChartCategoryAxes> para poner todos los Axis en la misma categoria y no separada
                                    <ChartCategoryAxis Categories="@Categories"></ChartCategoryAxis>
                                </ChartCategoryAxes>*@

                            @*<ChartValueAxes>
                                    <ChartValueAxis AxisCrossingValue="@MaximoRangoGrafica">
                                        <ChartValueAxisLabels Format="{0} ºC"></ChartValueAxisLabels>
                                    </ChartValueAxis>
                                </ChartValueAxes>*@

                            <ChartValueAxes>
                                <ChartValueAxis AxisCrossingValue="@MaximoRangoGrafica">
                                    <ChartValueAxisLabels Format="{0} ºC"></ChartValueAxisLabels>
                                </ChartValueAxis>
                            </ChartValueAxes>

                            @*<ChartCategoryAxes>
                                    <ChartCategoryAxis BaseUnit="ChartCategoryAxisBaseUnit.Days" WeekStartDay="1" Type="ChartCategoryAxisType.Date">
                                        <ChartCategoryAxisLabels Format="{0:dd MMM}" />
                                    </ChartCategoryAxis>
                                </ChartCategoryAxes>*@
                            <ChartCategoryAxes>
                                <ChartCategoryAxis Categories="@xAxisItems"></ChartCategoryAxis>
                            </ChartCategoryAxes>
                        </TelerikChart>
                    </div>
                    <hr />
                    <h3><label style="text-align: center; display: block;     padding-bottom: 10px;"> Temperatura Promedio Máximo de Sensores</label></h3>
                    <div id="graficoHistoricoMax">
                        <TelerikChart Transitions="false">
                            <ChartTooltip Visible="true">
                            </ChartTooltip>
                            <ChartLegend Visible="true" Position="ChartLegendPosition.Top"></ChartLegend>
                            <ChartSeriesItems>
                                @for (int i = 0, len = mobileids.Count(); i < len; i++)
                                {

                                    List<object> datos_ = new List<object>();
                                    List<int> pos = new List<int>();
                                    string alias = "";

                                    for (int j = 0, lenj = DatosGrafico.Count(); j < lenj; j++)
                                    {

                                        if (DatosGrafico[j].mobileid == mobileids[i])
                                        {
                                            alias = DatosGrafico[j].alias;
                                            pos.Add(j);
                                        }
                                    }
                                    for (int k = 0, lenk = xAxisItems.Count(); k < lenk; k++)
                                    {
                                        bool existe = false;
                                        for (int h = 0, lenh = pos.Count(); h < lenh; h++)
                                        {
                                            if (xAxisItems[k] == DatosGrafico[pos[h]].dategps2.ToString("MMM dd"))
                                            {
                                                existe = true;
                                                datos_.Add(DatosGrafico[pos[h]].promedioMax);
                                            }
                                        }
                                        if (!existe)
                                        {
                                            datos_.Add(null);
                                        }
                                    }
                                <ChartSeries Type="ChartSeriesType.Line" Name="@alias" Data="@datos_">
                                    <ChartSeriesLabels Visible="false"></ChartSeriesLabels>
                                </ChartSeries>
                                @*<ChartSeries Type="ChartSeriesType.Line" Name="@DatosGrafico[i].placaGraf"
                                                 Data="@DatosGrafico[i].diasporplacas" Field="@nameof(grafMensual.placaGraf)">
                                    </ChartSeries>

                                    <ChartSeries Type="ChartSeriesType.Line" Name="@nameof(rpteHistorico.alias)"
                                                 Data="@DatosGrafico[i].prom"
                                                 Field="@nameof(rpteHistorico.promedioMax)" CategoryField="@nameof(rpteHistorico.dategps2)" Color="Blue">
                                        <ChartSeriesLabels Visible="true"></ChartSeriesLabels>
                                    </ChartSeries>*@
                                }


                                @*<ChartSeries Type="ChartSeriesType.Line" Name="Sensor A (ºC)" Data="@DatosGrafico"
                                                 Field="@nameof(rpteHistorico.s1Max)" CategoryField="@nameof(rpteHistorico.dategps2)">
                                        <ChartSeriesLabels Visible="false"></ChartSeriesLabels>
                                    </ChartSeries>
                                    <ChartSeries Type="ChartSeriesType.Line" Name="Sensor B (ºC)" Data="@DatosGrafico"
                                                 Field="@nameof(rpteHistorico.s2Max)" CategoryField="@nameof(rpteHistorico.dategps2)">
                                        <ChartSeriesLabels Visible="false"></ChartSeriesLabels>
                                    </ChartSeries>
                                    <ChartSeries Type="ChartSeriesType.Line" Name="Sensor C (ºC)" Data="@DatosGrafico"
                                                 Field="@nameof(rpteHistorico.s3Max)" CategoryField="@nameof(rpteHistorico.dategps2)">
                                        <ChartSeriesLabels Visible="false"></ChartSeriesLabels>
                                    </ChartSeries>
                                    <ChartSeries Type="ChartSeriesType.Line" Name="Sensor D (ºC)" Data="@DatosGrafico"
                                                 Field="@nameof(rpteHistorico.s4Max)" CategoryField="@nameof(rpteHistorico.dategps2)" Visible="@CountSensor4">
                                        <ChartSeriesLabels Visible="false"></ChartSeriesLabels>
                                    </ChartSeries>
                                    <ChartSeries Type="ChartSeriesType.Line" Name="Sensor E (ºC)" Data="@DatosGrafico"
                                                 Field="@nameof(rpteHistorico.s5Max)" CategoryField="@nameof(rpteHistorico.dategps2)" Visible="@CountSensor5">
                                        <ChartSeriesLabels Visible="false"></ChartSeriesLabels>
                                    </ChartSeries>
                                    <ChartSeries Type="ChartSeriesType.Line" Name="Sensor F (ºC)" Data="@DatosGrafico"
                                                 Field="@nameof(rpteHistorico.s6Max)" CategoryField="@nameof(rpteHistorico.dategps2)" Visible="@CountSensor6">
                                        <ChartSeriesLabels Visible="false"></ChartSeriesLabels>
                                    </ChartSeries>
                                    <ChartSeries Type="ChartSeriesType.Line" Name="Promedio (ºC)" Data="@DatosGrafico"
                                                 Field="@nameof(rpteHistorico.promedioMax)" CategoryField="@nameof(rpteHistorico.dategps2)" Color="Blue">
                                        <ChartSeriesLabels Visible="true"></ChartSeriesLabels>
                                    </ChartSeries>*@
                            </ChartSeriesItems>
                            @*<ChartCategoryAxes> para poner todos los Axis en la misma categoria y no separada
                                    <ChartCategoryAxis Categories="@Categories"></ChartCategoryAxis>
                                </ChartCategoryAxes>*@

                            @*<ChartValueAxes>
                                    <ChartValueAxis AxisCrossingValue="@MaximoRangoGrafica">
                                        <ChartValueAxisLabels Format="{0} ºC"></ChartValueAxisLabels>
                                    </ChartValueAxis>
                                </ChartValueAxes>*@

                            <ChartValueAxes>
                                <ChartValueAxis AxisCrossingValue="@MaximoRangoGrafica">
                                    <ChartValueAxisLabels Format="{0} ºC"></ChartValueAxisLabels>
                                </ChartValueAxis>
                            </ChartValueAxes>
                            <ChartCategoryAxes>
                                <ChartCategoryAxis Categories="@xAxisItems"></ChartCategoryAxis>
                            </ChartCategoryAxes>
                            @*<ChartCategoryAxes>
                                    <ChartCategoryAxis BaseUnit="ChartCategoryAxisBaseUnit.Days" WeekStartDay="1" Type="ChartCategoryAxisType.Date">
                                        <ChartCategoryAxisLabels Format="{0:dd MMM}" />
                                    </ChartCategoryAxis>
                                </ChartCategoryAxes>*@
                        </TelerikChart>
                    </div>
                    <hr />
                        Task.Run(async () =>
                        {
                            await fn_graficos();
                        });
                        
                    }
                    <div class="row">
                        <div class="col-lg-3">
                            <div class="card-deck">
                                <div class="card">
                                    <div class="card-header">
                                        <label style=" font-size: smaller;">Seleccione un vehículo o varios manteniendo la tecla "Ctrl" y seleccionando con click.</label>
                                    </div>
                                    <div class="card-body">
                                        <TelerikTreeView  Data="@FlatData"
                                                         SelectionMode="@TreeViewSelectionMode.Multiple"
                                                         SelectedItems="@SelectedItems"
                                                         SelectedItemsChanged="((IEnumerable<object> items) => SelectedItemsChangedHandler(items))">
                                        </TelerikTreeView>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="col-lg-9">
                            <TelerikGrid Data="@dataGrid" Height="800px" Width="-webkit-fill-available;"
                                         Pageable="true" Sortable="true" Groupable="true"
                                         FilterMode="Telerik.Blazor.GridFilterMode.FilterRow"
                                         Resizable="true" Reorderable="true" PageSize="50">
                                <GridToolBar>
                                    <GridCommandButton Command="ExcelExport" Icon="@IconName.FileExcel">Exportar</GridCommandButton>
                                    <label><TelerikCheckBox @bind-Value="@ExportAllPages" /> Todas las paginas</label>
                                </GridToolBar>
                                <GridExport>
                                    <GridExcelExport FileName="Historico_Temperatura" AllPages="@ExportAllPages" />
                                </GridExport>
                                <GridColumns>
                                    @*<GridColumn Field="@(nameof(rpteAlertasDiarias.mobileid))" Title="id" Width="200px" />*@
                                    <GridColumn Field="@(nameof(rpteHistorico.subflota))" Title="Subflota" Groupable="false" Width="200px" Locked="true" />
                                    <GridColumn Field="@(nameof(rpteHistorico.vehiculo))" Title="Placa" Groupable="false" Width="200px" Locked="true" />
                                    <GridColumn Field="@(nameof(rpteHistorico.alias))" Title="Alias" Groupable="false" Width="200px" Locked="true" />
                                    <GridColumn Field="@(nameof(rpteHistorico.dategps2))" Title="Fecha" Width="200px" />
                                    <GridColumn Field="@(nameof(rpteHistorico.s1Min))" Title="Sensor A min (ºC)" Width="160px" />
                                    <GridColumn Field="@(nameof(rpteHistorico.s2Min))" Title="Sensor B min (ºC)" Width="160px" />
                                    <GridColumn Field="@(nameof(rpteHistorico.s3Min))" Title="Sensor C min (ºC)" Width="160px" />
                                    <GridColumn Field="@(nameof(rpteHistorico.promedioMin))" Title="Promedio min (ºC)" Width="160px" />
                                    <GridColumn Field="@(nameof(rpteHistorico.s1Max))" Title="Sensor A max (ºC)" Width="160px" />
                                    <GridColumn Field="@(nameof(rpteHistorico.s2Max))" Title="Sensor B max (ºC)" Width="160px" />
                                    <GridColumn Field="@(nameof(rpteHistorico.s3Max))" Title="Sensor C max (ºC)" Width="160px" />
                                    <GridColumn Field="@(nameof(rpteHistorico.promedioMax))" Title="Promedio max (ºC)" Width="160px" />
                                    @if (CountSensor4 == true)
                                    {<GridColumn Field="@(nameof(rpteHistorico.s4Min))" Title="Sensor D (ºC)" Width="160px" />
                                    <GridColumn Field="@(nameof(rpteHistorico.s4Max))" Title="Sensor D (ºC)" Width="160px" />}
                                    @if (CountSensor5 == true)
                                    {<GridColumn Field="@(nameof(rpteHistorico.s5Min))" Title="Sensor E (ºC)" Width="160px" />
                                    <GridColumn Field="@(nameof(rpteHistorico.s5Max))" Title="Sensor E (ºC)" Width="160px" />}
                                    @if (CountSensor6 == true)
                                    {<GridColumn Field="@(nameof(rpteHistorico.s6Min))" Title="Sensor F (ºC)" Width="160px" />
                                    <GridColumn Field="@(nameof(rpteHistorico.s6Max))" Title="Sensor F (ºC)" Width="160px" />}

                                </GridColumns>
                            </TelerikGrid>
                            <div class="notification-container mt-3">
                                <TelerikAnimationContainer @ref="@NotificacionExito" Width="300px" Height="200px" Top="50%" AnimationType=@AnimationType.SlideUp>
                                    <div class="k-widget k-popup k-notification k-notification-info-sucess">
                                        <h3>Aviso</h3><p>
                                            <TelerikIcon Icon="@IconName.Check" />
                                            Datos consultados satifactorio.
                                        </p>
                                    </div>
                                </TelerikAnimationContainer>
                            </div>
                            <div class="notification-container mt-3">
                                <TelerikAnimationContainer @ref="@NotificacionAviso" Width="300px" Height="200px" Top="50%" AnimationType=@AnimationType.SlideUp>
                                    <div class="k-widget k-popup k-notification k-notification-info-alerta">
                                        <h3>Advertencia</h3><p>
                                            <TelerikIcon Icon="@IconName.Warning" />
                                            No hay registro de datos.
                                        </p>
                                    </div>
                                </TelerikAnimationContainer>
                            </div>
                            <div class="notification-container mt-3">
                                <TelerikAnimationContainer @ref="@NotificacioError" Width="300px" Height="200px" Top="50%" AnimationType=@AnimationType.SlideUp>
                                    <div class="k-widget k-popup k-notification k-notification-info-error">
                                        <h3>Error</h3><p>
                                            <TelerikIcon Icon="@IconName.CloseCircle" />
                                            Error al consultar los datos.
                                        </p>
                                    </div>
                                </TelerikAnimationContainer>
                            </div>
                            <div class="notification-container mt-3">
                                <TelerikAnimationContainer @ref="@NotificacionCargando" Width="300px" Height="200px" Top="50%" AnimationType=@AnimationType.SlideUp>
                                    <div class="k-widget k-popup k-notification k-notification-info-load">
                                        <p>
                                            @*style="width: 30px; height: 30px; float:right"*@
                                            <TelerikIcon Icon="@IconName.Zoom" />
                                            Verificando...


                                        </p>
                                    </div>
                                </TelerikAnimationContainer>
                            </div>

                        </div>
                    </div>

                </div>
            </div>
        </div>
    </div>
</div>


@code {
    [Parameter]
    public int Userid { get; set; }
    [Parameter]
    public int Companyid { get; set; }


    DateTime maxDate { get; set; } = DateTime.Now.AddDays(-1);
    DateTime valueDate { get; set; } = DateTime.Now.AddDays(-1);
    private DateTime ValorFecha1 = DateTime.Now.AddDays(-1);
    private DateTime ValorFecha2 = DateTime.Now.AddDays(-1);

    DateTime dt = new DateTime();
    public string datoFechaInicio { get; set; }
    public string datoFechaFin { get; set; }

    public TelerikAnimationContainer Cargando { get; set; }
    bool ExportAllPages { get; set; } = true;
    bool bandera = false;
    bool CountSensor4 = false;
    bool CountSensor5 = false;
    bool CountSensor6 = false;
    public List<rpteHistorico> DatosGrafico { get; set; }


    public object[] MaximoRangoGrafica = new object[] { -40 };

    //public int ValorListTipo { get; set; } = 0;
    //public int ValorListSubflota { get; set; }
    //public int ValorListVehiculo { get; set; }



    //-------------------inyeccion de modelos--------------------
    //IEnumerable<Listados> dataListMobile;
    //IEnumerable<Listados> dataListSubflota;
    IEnumerable<Listados> dataListTipo;

        IEnumerable<smstemp.Models.rpteHistorico> dataGrid;
    //-----------------------------------------------------ABROL
    public IEnumerable<object> SelectedItems { get; set; } = new List<object>();
    public IEnumerable<Arbol> FlatData { get; set; }
    public string ArbolMobile { get; set; }
    public List<int> mobileids { get; set; }
    public string[] xAxisItems;
    // public List<rpHistoricoGraf> DatoGraficoProcesado { get; set; }
    void SelectedItemsChangedHandler(IEnumerable<object> items)
    {
        SelectedItems = items;
        try
        {
            mobileids = new List<int>();
            //CAST A OBJECT PARA PODER LISTAR PO POSICION
            var list2 = items.Cast<Arbol>().ToList();

            ArbolMobile = "";
            for (int i = 0, len = SelectedItems.Count(); i < len; i++)
            {
                mobileids.Add(list2[i].Id);
                // ASIGNACION POR POSICION A CADENA DE MOBILES

                ArbolMobile = ArbolMobile + list2[i].Id + ",";
            }
        }
        catch (Exception ) {
            Task.Run(async () =>
            {
                await NotificacionError();
            });
        }
    }
    protected override async Task OnInitializedAsync()
    {
        FlatData = await IListadosService.GetArbol(Userid, Companyid, 0, 12);
        //dataListMobile = await IListadosService.GetListados(Userid, Companyid, 1724, 1);
        //dataListSubflota = await IListadosService.GetListados(Userid, Companyid, 0, 2);
        //dataListTipo = await IListadosService.GetListados(Userid, Companyid, 0, 4);
        //SelecccionDefaultList();
        //dataListMobile = await IListadosService.GetListados(Userid, Companyid, ValorListSubflota, 9);
        //ValorListTipo = dataListTipo.FirstOrDefault().Id;

    }

    public async Task fn_graficos()
    {
        await jsRuntime.InvokeVoidAsync("fn_HideShowGraf", "graficoHistoricoMin");
        await jsRuntime.InvokeVoidAsync("fn_HideShowGraf", "graficoHistoricoMax");
    }

    //public async Task SelecccionDefaultList()
    //{
    //    /*-------Cargas en Select(0) primer item de drodpwnlist--------------------*/
    //    //ValorListSubflota = dataListSubflota.FirstOrDefault().Id;
    //    //onChangeSubflotaResultado(ValorListSubflota);
    //    //ValorListVehiculo = dataListMobile.FirstOrDefault().Id;

    //}
    //---------------- Funcion de onchanges de subflota------------------------
    string result;
    int subf;
    //void onChangeSubflota(object theUserInput)
    //{
    //    subf = (int)theUserInput;
    //    onChangeSubflotaResultado(subf);
    //}
    //protected async Task onChangeSubflotaResultado(int SubflotaID)
    //{
    //    dataListMobile = await IListadosService.GetListados(Userid, Companyid, SubflotaID, 1);
    //    ValorListVehiculo = dataListMobile.FirstOrDefault().Id;
    //}

    //------------------------- Carga de datos de boton consultar-------------------------------
    protected async Task Consultar()
    {
        await Cargando.ShowAsync();
        datoFechaInicio = ValorFecha1.ToString("yyyyMMdd 00:00:00");
        datoFechaFin = ValorFecha2.ToString("yyyyMMdd 23:59:59");

        // int totaldias = (ValorFecha2 - ValorFecha1).Days + 1;

        //int mobileid, DateTime fecha, int RangoTiempo, int companyid
        dataGrid = await IrpteHistoricoService.GetObtenerHistorico(ArbolMobile, datoFechaInicio, datoFechaFin, Companyid);
        // var dataGridGraf = await IrpteHistoricoService.GetObtenerHistorico(ArbolMobile, ValorFecha1, ValorFecha2);
        DatosGrafico = dataGrid.ToList();

        //DatoSeleccionado = dataGrid.FirstOrDefault();
        //SelectedItems = new List<rpteHistorico> { DatoSeleccionado };

        //Validando Data y dando acceso por los sensores a la grafica
        if (DatosGrafico.Count() > 0)
        {
            bandera = true;
            if (DatosGrafico[0].cantidadSensorT == 4)
            {
                CountSensor4 = true;
            }
            else { CountSensor4 = false; }
            if (DatosGrafico[0].cantidadSensorT == 5)
            {
                CountSensor4 = true;
                CountSensor5 = true;
            }
            else { CountSensor4 = false; CountSensor5 = false; }
            if (DatosGrafico[0].cantidadSensorT == 6)
            {
                CountSensor4 = true;
                CountSensor5 = true;
                CountSensor6 = true;
            }
            else { CountSensor4 = false; CountSensor5 = false; CountSensor6 = false; }
        }
        else { bandera = false; 
            await NotificacionAdvertencia(); 
        }


        // var dates = new List<DateTime>();
        List<string> strlist = new List<string>();
        for (var dt = ValorFecha1; dt <= ValorFecha2; dt = dt.AddDays(1))
        {
            //strlist.Add(dt.ToString("dd MMM"));
            strlist.Add(dt.ToString("MMM dd"));
            // dates.Add(dt);
        }
        xAxisItems = strlist.ToArray();
        /* DatoGraficoProcesado = new List<rpHistoricoGraf>();
         rpHistoricoGraf d = new rpHistoricoGraf();
         for (int i = 0, len = mobileids.Count(); i < len; i++)
         {

         }*/
        /*
        List<float> list = new List<float>();
        for (int i = 0, len = DatosGrafico.Count(); i < len; i++)
        {
            //float n = DatosGrafico[i].
        }
        */
        await Task.Delay(1500);
        await Cargando.HideAsync();
        //await jsRuntime.InvokeAsync<string>("console.log", DatosGrafico[i].s4);

    }

    //-----------------------------------------------------NOTIFICACIONES
    public TelerikAnimationContainer NotificacionExito { get; set; }
    protected async Task NotificacionSucess()
    {
        await NotificacionExito.ShowAsync();
        await Task.Delay(3000);
        await NotificacionExito.HideAsync();
    }
    public TelerikAnimationContainer NotificacionAviso { get; set; }
    protected async Task NotificacionAdvertencia()
    {
        await NotificacionAviso.ShowAsync();
        await Task.Delay(3000);
        await NotificacionAviso.HideAsync();
    }

    public TelerikAnimationContainer NotificacioError { get; set; }
    protected async Task NotificacionError()
    {
        await NotificacioError.ShowAsync();
        await Task.Delay(3000);
        await NotificacioError.HideAsync();
    }
    public TelerikAnimationContainer NotificacionCargando { get; set; }
    protected async Task NotificacionLoad()
    {
        await NotificacionCargando.ShowAsync();
        await Task.Delay(3000);
        await NotificacionCargando.HideAsync();
    }



}
<style type="text/css">
    /* The specially positioned parent of the notification controls its position */

    /*  .k-animation-container {
        position: fixed;
        min-height: 200px;
        right: 2%;
        bottom: 0%;
    }*/
    .notification-container {
        position: fixed;
        min-height: 200px;
        right: 19%;
        bottom: 7%;
    }

    .k-notification-info-error {
        /*rojo error  #D25E52*/
        border-color: #C62827;
        background-color: #C62827;
        color: #fff;
    }

    .k-notification-info-load {
        /*rojo error  #D25E52*/
        border-color: #C62827;
        background-color: #C62827;
        color: #fff;
    }

    .k-notification-info-alerta {
        /*  rojo aviso*/
        border-color: #DD7D63;
        background-color: #DD7D63;
        color: #fff;
    }

    .k-notification-info-sucess {
        /*verde*/
        border-color: #65B688;
        background-color: #65B688;
        color: #fff;
    }
</style>
</TelerikRootComponent>